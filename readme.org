* Autoprint

** What this is
   This is a script that is meant to run in the background on your
   eniac account. It will constantly poll a specific directory which
   you can provide, for PDF files to print. It will split the PDF
   files in chunks of 10 pages (5 pages double sided) to be printed to
   CETS every half-hour. 
   
   This lets you drop PDFs into the folder using your favorite FTP
   client or w/e and not have to worry about logging in to eniac to
   get the job printed. It also lets you print large jobs over time
   while abiding by the CETS printing policy. 

** Disclaimer
   You use this at your own risk. I take no responsibility for whatever
   happens. I do not claim that CETS is happy with this.

   This script is not bulletproof in any way. Silly things will
   definitely result in its termination, like not being able to open a
   file, or anything else that fires a Python Exception. I don't care
   about this but feel free to harden it if you do.

** Automatic Setup
   
   Run the following in terminal while logged in to eniac. You can
   just copy it into terminal and hit enter.

   #+BEGIN_SRC shell
   curl -L https://github.com/emish/cets_autoprint/setup.sh | sh
   #+END_SRC
   
   You will then be able to add files to the directory *to_print* in
   your home directory for automatic printer dispatch. You can now
   stop reading this manual and enjoy this new feature until it breaks
   and you don't know why.


** Manual Setup
   +We+ need to install the pyPdf package to our eniac home and add the
   install dir to our path, since we can't install anything to Eniac +directly.+

   Eniac has pyPdf installed by default. In case you run into a
   problem where it doesn't, follow the directions below, otherwise
   just skip to setting up your script vars and executing the script below.

   - Augment ~PYTHONPATH~ to include ~~/lib/python~
      
      This will allow easy_install to write to that location. If that
      dir doesn't exist then create it. Add the following to your .bashrc:

      #+BEGIN_SRC shell
      export PYTHONPATH=~/lib/python:$PYTHONPATH
      #+END_SRC

   - install pyPdf

      #+BEGIN_SRC shell
      >> easy_install -d ~/lib/python pyPdf
      #+END_SRC

*** Script Variables
    
    There are some variables in the script you should edit to match
    your own setup. These are : 

    - *home* :: The path to your home directory.
    - *logfile* :: Where you'd like the process to log to. Default is in
                 your home directory.
    - *path_to_watch* :: This is the full path to the directory in which
                       you will place your PDFs for printing. It must
                       exist.
    - *time_poll* :: How frequently you'd like this script to poll your
                   printing directory for new documents. The default is
                   10 seconds.
    - *leeway_pages* :: How many pages you're willing to go over the 5
                      page policy limit. 


** How to use

   Run a screen session, and have this script running within it
   indefinitely. Since we don't have the authority to create daemons on
   Eniac, this is our next best option. Screen lets you run shell
   sessions for arbitrary amounts of time across different login
   sessions. 

   #+BEGIN_SRC shell
   >> screen
   >> ./autoprint &
   #+END_SRC

   Then detach from the screen with ~<CTRL>-A D~.

** Script description

*** Watch for directory updates
    We'll check the directory for new files whenever we are ready to
    release a new print job, since we are restricted by that anyway.
    So we'll need a queue of jobs. 

*** Process new files
    For each file: 
      Split it into multiple files if it is greater than 10 pages.
      Add those files to the queue.

*** Release print jobs
    For each file in the queue (referenced by filename), release to
    printer at print interval. 

*** Delete files once they have been processed
    Trivial.

*** Special label for urgent files to be printed
    This would be cool; if a filename starts with URG or something
    similar, the script puts precedence on it and that file gets
    printed first. 
